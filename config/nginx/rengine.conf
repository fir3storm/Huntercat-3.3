# Redirect HTTP traffic to HTTPS
server {
    listen 80 default;
    listen [::]:80 default;
    server_name rengine recon;
    return 301 https://$host$request_uri;
}

# Reverse proxy for the "rengine" server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name rengine recon;

    charset utf-8;
    keepalive_timeout 70;

    client_max_body_size 800M;

    # Enable caching of static assets
    location /staticfiles/ {
        alias /usr/src/app/staticfiles/;
        expires 1y;
    }

    location /media/ {
        alias /usr/src/scan_results/;
    }

    location / {
        proxy_read_timeout 300;
        proxy_connect_timeout 300;
        proxy_redirect off;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://rengine:8000/;
    }

    # Enable session resumption
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    # Use more efficient cipher suite
    ssl_protocols TLSv1.2;
    ssl_ciphers '!EDH:!EXP:!SHA:!DSS:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256';
    ssl_prefer_server_ciphers on;

    # Use 4096-bit Diffie-Hellman server params and elliptic curve Diffie-Hellman server params
    ssl_dhparam /etc/ssl/private/private/dh4096.pem;
    ssl_ecdh_curve secp384r1:X25519:prime256v1;

    # Provide SSL certificate files
    ssl_certificate /etc/nginx/certs/rengine.pem;
    ssl_certificate_key /etc/nginx/certs/rengine_rsa.key;
    ssl_trusted_certificate /etc/nginx/certs/rengine_chain.pem;
}
